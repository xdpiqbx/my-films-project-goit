{"version":3,"sources":["webpack:///./javascript/fetchMovie.js","webpack:///./javascript/api.js","webpack:///./index.js"],"names":["KEY","BASE_URL","fetchMovie","url","fetch","then","response","json","page","refs","modal","document","querySelector","renderFullInfo","id","movie_id","data","console","log","html","poster_path","name","title","vote_average","vote_count","popularity","original_title","original_name","overview","innerHTML","addEventListener","classList","add","mainWrapper","pagination","results","map","d","insertAdjacentHTML","querySelectorAll","event","path","remove","dataset"],"mappings":"uKAsBMA,EAAM,mCAENC,EAAW,gCAeV,SAASC,EAAWC,GACvB,OAAOC,MAAMD,GAAKE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UCnChD,IDsBqCC,ECtB/BC,EAAO,CACTC,MAAOC,SAASC,cAAc,WAQrBC,EAAiB,SAACC,GDqBK,IAACC,ECZlCb,GDYkCa,ECZFD,EDarBb,EAAV,SAA2Bc,EAA3B,YAA+Cf,EAArCC,oBCZLI,MAAK,SAAAW,GACFC,QAAQC,IAAIF,GAEZ,IAAMG,EAAO,uGAEmDH,EAAKI,YAF3D,gFAKIJ,EAAKK,MAAQL,EAAKM,OALtB,oDAMsBN,EAAKO,aAN3B,MAM6CP,EAAKQ,WANlD,2CAOcR,EAAKS,WAPnB,iDAQmBT,EAAKU,gBAAkBV,EAAKW,eAR/C,sGAWGX,EAAKY,SAXR,ySAmBVnB,EAAKC,MAAMmB,UAAYV,EAETR,SAASC,cAAc,aAC/BkB,iBAAiB,SAAS,WAC5BrB,EAAKC,MAAMqB,UAAUC,IAAI,eCvCnCvB,G,UAAO,CACTwB,YAAatB,SAASC,cAAc,0BACpCsB,WAAYvB,SAASC,cAAc,aACnCF,MAAOC,SAASC,cAAc,YAGlCV,QFU6D,IAAxBM,MAJhB,GAKPP,EAAV,4BAA8CD,EAA9C,SAA0DQ,IEVzDH,MAAK,SAAAW,GAEFC,QAAQC,IAAIF,EAAKmB,SAIHnB,EAAKmB,QAEbC,KAAI,SAAAC,GACN,IAAMlB,EAAO,sEAC0CkB,EAAEvB,GAD/C,mFAEwDuB,EAAEjB,YAF1D,gCAGGiB,EAAEf,OAASe,EAAEhB,MAHhB,4CAMVZ,EAAKwB,YAAYK,mBAAmB,YAAanB,MAGtCR,SAAS4B,iBAAiB,aAEzC9B,EAAKwB,YAAYH,iBAAiB,SAAS,SAAAU,GACvCvB,QAAQC,IAAIsB,EAAMC,KAAK,IACvBhC,EAAKC,MAAMqB,UAAUW,OAAO,QAC5B7B,GAAgB2B,EAAMC,KAAK,GAAGE,QAAQ7B,Y","file":"main.a0744b44349596bfca8f.js","sourcesContent":["// Ссылка на документацию для запроса на список самых популярных фильмов на сегодня для создания коллекции на главной странице:\n//\thttps://developers.themoviedb.org/3/trending/get-trending\n//  https://api.themoviedb.org/3/trending/all/day?api_key=<<api_key>>\n\n// Ссылка на документацию для запроса кинофильма по ключевому слову на главное странице:\n// https://developers.themoviedb.org/3/search/search-movies\n// https://api.themoviedb.org/3/search/movie?api_key=<<api_key>>&language=en-US&page=1&include_adult=false\n\n// Ссылка на документацию для запроса у полной информации о кинофильме для страницы кинофильма:\n// https://developers.themoviedb.org/3/movies/get-movie-details\n// https://api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>&language=en-US\n\n\n/*\n    FT-07 Реализовать подгрузку популярных фильмов на главную (первую) страницу ++++\n    FT-09 При переходе на каждую страницу отрисосывать соответствующую часть фильмов ----------\n    FT-18 По нажатию на кнопку \"Add to watched\" фильм добавляется в просмотренные фильмы текущего пользователя (local-storage)\n    FT-19 По нажатию на кнопку \"Add to queue\" фильм добавляется в очередь текущего пользователя (local-storage)\n    FT-14 По нажатию на кнопку \"Watched\" (вверху на главной) показываются просмотренные фильмы пользователя\n    FT-15 По нажатию на кнопку \"Queue\" (вверху на главной) показываются фильмы добавленные в очередь пользователя\n*/\n\nconst KEY = \"9fba788361f0940b39e64c54ec217196\"\nconst DEFAULT_PAGE = 1\nconst BASE_URL = \"https://api.themoviedb.org/3/\"\nconst LANGUAGE = 'en-US'\n\nexport const createUrlForTrending = (page = DEFAULT_PAGE) => {\n    return `${BASE_URL}trending/all/day?api_key=${KEY}&page=${page}`\n}\n\nexport const createUrlSearchByKeyword = (query, page = DEFAULT_PAGE) => {\n    return `${BASE_URL}search/movie?api_key=${KEY}&language=${LANGUAGE}&page=${page}&include_adult=false&query=${query}`\n}\n\nexport const createUrlForFullInfo = (movie_id) => {\n    return `${BASE_URL}movie/${movie_id}?api_key=${KEY}&language=${LANGUAGE}`\n}\n\nexport function fetchMovie(url){\n    return fetch(url).then(response => response.json())\n}","import {\n    fetchMovie,\n    createUrlForFullInfo\n} from './fetchMovie'\n\nconst refs = {\n    modal: document.querySelector('.modal')\n}\n\n// export const renderFullInfo = (id) => {\n//    let data = localStorage.getItem('data')\n//    console.log(JSON.parse(data).find(data => data.id === id));\n// }\n\nexport const renderFullInfo = (id) => {\n    /*\n        после клика на фильм сюда приходит его id\n        вызвав эту ф-цию как параметр в\n        тут отрисовую фильм\n        и две кнопки\n        Add to watched (и чтоб потом кнопка була неактивна)\n        Add to queue (и чтоб потом кнопка була неактивна)\n    */\n   fetchMovie(createUrlForFullInfo(id))\n        .then(data=>{\n            console.log(data)\n\n            const html = `\n                <div>\n                    <img width='300' src=\"https://image.tmdb.org/t/p/w500/${data.poster_path}\"/>\n                </div>\n                <div>\n                    <h3>${data.name || data.title}</h3>\n                    <p>vote / votes ----- ${data.vote_average} / ${data.vote_count}</p>\n                    <p>Popularity ${data.popularity}</p>\n                    <p>Original title: ${data.original_title || data.original_name }</p>\n                    <p>Genre</p>\n                    <h4>About</h4>\n                    <p>${data.overview}</p>\n                    <div>\n                        <button>Add to watched</button>                    \n                        <button>Add to queue</button>\n                        <button class='js-close'>Close</button>\n                    </div>\n                </div>\n            `\n            refs.modal.innerHTML = html\n\n            const close = document.querySelector('.js-close')\n            close.addEventListener('click', ()=>{\n                refs.modal.classList.add('hide')\n            })\n        })\n}","import {\n    fetchMovie,\n    createUrlForTrending,\n    createUrlSearchByKeyword,\n    createUrlForFullInfo\n} from './javascript/fetchMovie'\n\nimport {renderFullInfo} from './javascript/api'\n\nimport './styles.scss';\n\nconst refs = {\n    mainWrapper: document.querySelector('.js-films-wrapper-list'),\n    pagination: document.querySelector('.js-pages'),\n    modal: document.querySelector('.modal')\n}\n\nfetchMovie(createUrlForTrending())\n    .then(data => {\n        //console.log(data)\n        console.log(data.results)\n//        localStorage.setItem('data', JSON.stringify(data.results))\n\n        //const films = data.results.slice(0, 9)\n        const films = data.results\n\n        films.map(d => {\n            const html = `\n                <li class=\"js-films-wrapper-list__item\" data-id=\"${d.id}\">\n                    <img width=\"200px\" src=\"https://image.tmdb.org/t/p/w500/${d.poster_path}\"/>\n                    <p>${d.title || d.name}</p>\n                </li>\n            `\n            refs.mainWrapper.insertAdjacentHTML(\"beforeend\", html)\n        })\n\n        let refsList = document.querySelectorAll('[data-id]')\n\n        refs.mainWrapper.addEventListener('click', event => {\n            console.log(event.path[1])\n            refs.modal.classList.remove('hide')\n            renderFullInfo(+event.path[1].dataset.id) // отдаю id в след запрос\n        })\n    }\n)\n\n\n\n\n// fetchMovie(createUrlSearchByKeyword('dog'))\n//     .then(data=>{\n//         console.log(data.results)\n//     }\n// )\n\n\n// let html = ``\n// refs.pagination.insertAdjacentHTML(\"beforeend\", html)\n"],"sourceRoot":""}